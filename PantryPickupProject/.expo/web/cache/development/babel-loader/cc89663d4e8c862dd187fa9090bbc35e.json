{"ast":null,"code":"'use strict';\n\nvar UIManager = require(\"../ReactNative/UIManager\");\n\nimport Platform from \"../Utilities/Platform\";\n\nfunction configureNext(config, onAnimationDidEnd, onAnimationDidFail) {\n  if (!Platform.isTesting) {\n    var _global;\n\n    if (UIManager != null && UIManager.configureNextLayoutAnimation) {\n      UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd != null ? onAnimationDidEnd : function () {}, onAnimationDidFail != null ? onAnimationDidFail : function () {});\n    }\n\n    var FabricUIManager = (_global = global) == null ? void 0 : _global.nativeFabricUIManager;\n\n    if (FabricUIManager != null && FabricUIManager.configureNextLayoutAnimation) {\n      var _global2, _global2$nativeFabric;\n\n      (_global2 = global) == null ? void 0 : (_global2$nativeFabric = _global2.nativeFabricUIManager) == null ? void 0 : _global2$nativeFabric.configureNextLayoutAnimation(config, onAnimationDidEnd != null ? onAnimationDidEnd : function () {}, onAnimationDidFail != null ? onAnimationDidFail : function () {});\n    }\n  }\n}\n\nfunction create(duration, type, property) {\n  return {\n    duration: duration,\n    create: {\n      type: type,\n      property: property\n    },\n    update: {\n      type: type\n    },\n    delete: {\n      type: type,\n      property: property\n    }\n  };\n}\n\nvar Presets = {\n  easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),\n  linear: create(500, 'linear', 'opacity'),\n  spring: {\n    duration: 700,\n    create: {\n      type: 'linear',\n      property: 'opacity'\n    },\n    update: {\n      type: 'spring',\n      springDamping: 0.4\n    },\n    delete: {\n      type: 'linear',\n      property: 'opacity'\n    }\n  }\n};\nvar LayoutAnimation = {\n  configureNext: configureNext,\n  create: create,\n  Types: Object.freeze({\n    spring: 'spring',\n    linear: 'linear',\n    easeInEaseOut: 'easeInEaseOut',\n    easeIn: 'easeIn',\n    easeOut: 'easeOut',\n    keyboard: 'keyboard'\n  }),\n  Properties: Object.freeze({\n    opacity: 'opacity',\n    scaleX: 'scaleX',\n    scaleY: 'scaleY',\n    scaleXY: 'scaleXY'\n  }),\n  checkConfig: function checkConfig() {\n    console.error('LayoutAnimation.checkConfig(...) has been disabled.');\n  },\n  Presets: Presets,\n  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),\n  linear: configureNext.bind(null, Presets.linear),\n  spring: configureNext.bind(null, Presets.spring)\n};\nmodule.exports = LayoutAnimation;","map":{"version":3,"sources":["C:/Users/nicol/Documents/Repos/HackDavis/PantryPickupProject/node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js"],"names":["UIManager","require","Platform","configureNext","config","onAnimationDidEnd","onAnimationDidFail","isTesting","configureNextLayoutAnimation","FabricUIManager","global","nativeFabricUIManager","create","duration","type","property","update","delete","Presets","easeInEaseOut","linear","spring","springDamping","LayoutAnimation","Types","Object","freeze","easeIn","easeOut","keyboard","Properties","opacity","scaleX","scaleY","scaleXY","checkConfig","console","error","bind","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst UIManager = require('../ReactNative/UIManager');\nimport type {Spec as FabricUIManagerSpec} from '../ReactNative/FabricUIManager';\nimport type {\n  LayoutAnimationConfig as LayoutAnimationConfig_,\n  LayoutAnimationType,\n  LayoutAnimationProperty,\n} from '../Renderer/shims/ReactNativeTypes';\n\nimport Platform from '../Utilities/Platform';\n\n// Reexport type\nexport type LayoutAnimationConfig = LayoutAnimationConfig_;\n\ntype OnAnimationDidEndCallback = () => void;\ntype OnAnimationDidFailCallback = () => void;\n\nfunction configureNext(\n  config: LayoutAnimationConfig,\n  onAnimationDidEnd?: OnAnimationDidEndCallback,\n  onAnimationDidFail?: OnAnimationDidFailCallback,\n) {\n  if (!Platform.isTesting) {\n    if (UIManager?.configureNextLayoutAnimation) {\n      UIManager.configureNextLayoutAnimation(\n        config,\n        onAnimationDidEnd ?? function() {},\n        onAnimationDidFail ??\n          function() {} /* this should never be called in Non-Fabric */,\n      );\n    }\n    const FabricUIManager: FabricUIManagerSpec = global?.nativeFabricUIManager;\n    if (FabricUIManager?.configureNextLayoutAnimation) {\n      global?.nativeFabricUIManager?.configureNextLayoutAnimation(\n        config,\n        onAnimationDidEnd ?? function() {},\n        onAnimationDidFail ??\n          function() {} /* this will only be called if configuration fails */,\n      );\n    }\n  }\n}\n\nfunction create(\n  duration: number,\n  type: LayoutAnimationType,\n  property: LayoutAnimationProperty,\n): LayoutAnimationConfig {\n  return {\n    duration,\n    create: {type, property},\n    update: {type},\n    delete: {type, property},\n  };\n}\n\nconst Presets = {\n  easeInEaseOut: (create(\n    300,\n    'easeInEaseOut',\n    'opacity',\n  ): LayoutAnimationConfig),\n  linear: (create(500, 'linear', 'opacity'): LayoutAnimationConfig),\n  spring: {\n    duration: 700,\n    create: {\n      type: 'linear',\n      property: 'opacity',\n    },\n    update: {\n      type: 'spring',\n      springDamping: 0.4,\n    },\n    delete: {\n      type: 'linear',\n      property: 'opacity',\n    },\n  },\n};\n\n/**\n * Automatically animates views to their new positions when the\n * next layout happens.\n *\n * A common way to use this API is to call it before calling `setState`.\n *\n * Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:\n *\n *     UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n */\nconst LayoutAnimation = {\n  /**\n   * Schedules an animation to happen on the next layout.\n   *\n   * @param config Specifies animation properties:\n   *\n   *   - `duration` in milliseconds\n   *   - `create`, `AnimationConfig` for animating in new views\n   *   - `update`, `AnimationConfig` for animating views that have been updated\n   *\n   * @param onAnimationDidEnd Called when the animation finished.\n   * Only supported on iOS.\n   * @param onError Called on error. Only supported on iOS.\n   */\n  configureNext,\n  /**\n   * Helper for creating a config for `configureNext`.\n   */\n  create,\n  Types: Object.freeze({\n    spring: 'spring',\n    linear: 'linear',\n    easeInEaseOut: 'easeInEaseOut',\n    easeIn: 'easeIn',\n    easeOut: 'easeOut',\n    keyboard: 'keyboard',\n  }),\n  Properties: Object.freeze({\n    opacity: 'opacity',\n    scaleX: 'scaleX',\n    scaleY: 'scaleY',\n    scaleXY: 'scaleXY',\n  }),\n  checkConfig(...args: Array<mixed>) {\n    console.error('LayoutAnimation.checkConfig(...) has been disabled.');\n  },\n  Presets,\n  easeInEaseOut: (configureNext.bind(null, Presets.easeInEaseOut): (\n    onAnimationDidEnd?: OnAnimationDidEndCallback,\n  ) => void),\n  linear: (configureNext.bind(null, Presets.linear): (\n    onAnimationDidEnd?: OnAnimationDidEndCallback,\n  ) => void),\n  spring: (configureNext.bind(null, Presets.spring): (\n    onAnimationDidEnd?: OnAnimationDidEndCallback,\n  ) => void),\n};\n\nmodule.exports = LayoutAnimation;\n"]},"metadata":{},"sourceType":"module"}