{"ast":null,"code":"'use strict';\n\nimport * as React from 'react';\nimport Text from \"../../Text/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar cleanContent = function cleanContent(content) {\n  return content.replace(/^(TransformError |Warning: (Warning: )?|Error: )/g, '');\n};\n\nfunction LogBoxMessage(props) {\n  var _props$message = props.message,\n      content = _props$message.content,\n      substitutions = _props$message.substitutions;\n\n  if (props.plaintext === true) {\n    return _jsx(Text, {\n      children: cleanContent(content)\n    });\n  }\n\n  var maxLength = props.maxLength != null ? props.maxLength : Infinity;\n  var substitutionStyle = props.style;\n  var elements = [];\n  var length = 0;\n\n  var createUnderLength = function createUnderLength(key, message, style) {\n    var cleanMessage = cleanContent(message);\n\n    if (props.maxLength != null) {\n      cleanMessage = cleanMessage.slice(0, props.maxLength - length);\n    }\n\n    if (length < maxLength) {\n      elements.push(_jsx(Text, {\n        style: style,\n        children: cleanMessage\n      }, key));\n    }\n\n    length += cleanMessage.length;\n  };\n\n  var lastOffset = substitutions.reduce(function (prevOffset, substitution, index) {\n    var key = String(index);\n\n    if (substitution.offset > prevOffset) {\n      var prevPart = content.substr(prevOffset, substitution.offset - prevOffset);\n      createUnderLength(key, prevPart);\n    }\n\n    var substititionPart = content.substr(substitution.offset, substitution.length);\n    createUnderLength(key + '.5', substititionPart, substitutionStyle);\n    return substitution.offset + substitution.length;\n  }, 0);\n\n  if (lastOffset < content.length) {\n    var lastPart = content.substr(lastOffset);\n    createUnderLength('-1', lastPart);\n  }\n\n  return _jsx(_Fragment, {\n    children: elements\n  });\n}\n\nexport default LogBoxMessage;","map":{"version":3,"sources":["C:/Users/nicol/Documents/Repos/HackDavis/PantryPickupProject/node_modules/react-native/Libraries/LogBox/UI/LogBoxMessage.js"],"names":["React","Text","cleanContent","content","replace","LogBoxMessage","props","message","substitutions","plaintext","maxLength","Infinity","substitutionStyle","style","elements","length","createUnderLength","key","cleanMessage","slice","push","lastOffset","reduce","prevOffset","substitution","index","String","offset","prevPart","substr","substititionPart","lastPart"],"mappings":"AAUA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP;;;;AAaA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,OAAO;AAAA,SAC1BA,OAAO,CAACC,OAAR,CAAgB,mDAAhB,EAAqE,EAArE,CAD0B;AAAA,CAA5B;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAAiD;AAC/C,uBAA0CA,KAAK,CAACC,OAAhD;AAAA,MAAOJ,OAAP,kBAAOA,OAAP;AAAA,MAAgBK,aAAhB,kBAAgBA,aAAhB;;AAEA,MAAIF,KAAK,CAACG,SAAN,KAAoB,IAAxB,EAA8B;AAC5B,WAAO,KAAC,IAAD;AAAA,gBAAOP,YAAY,CAACC,OAAD;AAAnB,MAAP;AACD;;AAED,MAAMO,SAAS,GAAGJ,KAAK,CAACI,SAAN,IAAmB,IAAnB,GAA0BJ,KAAK,CAACI,SAAhC,GAA4CC,QAA9D;AACA,MAAMC,iBAAgC,GAAGN,KAAK,CAACO,KAA/C;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,MAAM,GAAG,CAAb;;AACA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD,EAAMV,OAAN,EAAeM,KAAf,EAAyB;AACjD,QAAIK,YAAY,GAAGhB,YAAY,CAACK,OAAD,CAA/B;;AAEA,QAAID,KAAK,CAACI,SAAN,IAAmB,IAAvB,EAA6B;AAC3BQ,MAAAA,YAAY,GAAGA,YAAY,CAACC,KAAb,CAAmB,CAAnB,EAAsBb,KAAK,CAACI,SAAN,GAAkBK,MAAxC,CAAf;AACD;;AAED,QAAIA,MAAM,GAAGL,SAAb,EAAwB;AACtBI,MAAAA,QAAQ,CAACM,IAAT,CACE,KAAC,IAAD;AAAgB,QAAA,KAAK,EAAEP,KAAvB;AAAA,kBACGK;AADH,SAAWD,GAAX,CADF;AAKD;;AAEDF,IAAAA,MAAM,IAAIG,YAAY,CAACH,MAAvB;AACD,GAhBD;;AAkBA,MAAMM,UAAU,GAAGb,aAAa,CAACc,MAAd,CAAqB,UAACC,UAAD,EAAaC,YAAb,EAA2BC,KAA3B,EAAqC;AAC3E,QAAMR,GAAG,GAAGS,MAAM,CAACD,KAAD,CAAlB;;AAEA,QAAID,YAAY,CAACG,MAAb,GAAsBJ,UAA1B,EAAsC;AACpC,UAAMK,QAAQ,GAAGzB,OAAO,CAAC0B,MAAR,CACfN,UADe,EAEfC,YAAY,CAACG,MAAb,GAAsBJ,UAFP,CAAjB;AAKAP,MAAAA,iBAAiB,CAACC,GAAD,EAAMW,QAAN,CAAjB;AACD;;AAED,QAAME,gBAAgB,GAAG3B,OAAO,CAAC0B,MAAR,CACvBL,YAAY,CAACG,MADU,EAEvBH,YAAY,CAACT,MAFU,CAAzB;AAKAC,IAAAA,iBAAiB,CAACC,GAAG,GAAG,IAAP,EAAaa,gBAAb,EAA+BlB,iBAA/B,CAAjB;AACA,WAAOY,YAAY,CAACG,MAAb,GAAsBH,YAAY,CAACT,MAA1C;AACD,GAnBkB,EAmBhB,CAnBgB,CAAnB;;AAqBA,MAAIM,UAAU,GAAGlB,OAAO,CAACY,MAAzB,EAAiC;AAC/B,QAAMgB,QAAQ,GAAG5B,OAAO,CAAC0B,MAAR,CAAeR,UAAf,CAAjB;AACAL,IAAAA,iBAAiB,CAAC,IAAD,EAAOe,QAAP,CAAjB;AACD;;AAED,SAAO;AAAA,cAAGjB;AAAH,IAAP;AACD;;AAED,eAAeT,aAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport Text from '../../Text/Text';\n\nimport type {TextStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {Message} from '../Data/parseLogBoxLog';\n\ntype Props = {\n  message: Message,\n  style: TextStyleProp,\n  plaintext?: ?boolean,\n  maxLength?: ?number,\n  ...\n};\n\nconst cleanContent = content =>\n  content.replace(/^(TransformError |Warning: (Warning: )?|Error: )/g, '');\n\nfunction LogBoxMessage(props: Props): React.Node {\n  const {content, substitutions}: Message = props.message;\n\n  if (props.plaintext === true) {\n    return <Text>{cleanContent(content)}</Text>;\n  }\n\n  const maxLength = props.maxLength != null ? props.maxLength : Infinity;\n  const substitutionStyle: TextStyleProp = props.style;\n  const elements = [];\n  let length = 0;\n  const createUnderLength = (key, message, style) => {\n    let cleanMessage = cleanContent(message);\n\n    if (props.maxLength != null) {\n      cleanMessage = cleanMessage.slice(0, props.maxLength - length);\n    }\n\n    if (length < maxLength) {\n      elements.push(\n        <Text key={key} style={style}>\n          {cleanMessage}\n        </Text>,\n      );\n    }\n\n    length += cleanMessage.length;\n  };\n\n  const lastOffset = substitutions.reduce((prevOffset, substitution, index) => {\n    const key = String(index);\n\n    if (substitution.offset > prevOffset) {\n      const prevPart = content.substr(\n        prevOffset,\n        substitution.offset - prevOffset,\n      );\n\n      createUnderLength(key, prevPart);\n    }\n\n    const substititionPart = content.substr(\n      substitution.offset,\n      substitution.length,\n    );\n\n    createUnderLength(key + '.5', substititionPart, substitutionStyle);\n    return substitution.offset + substitution.length;\n  }, 0);\n\n  if (lastOffset < content.length) {\n    const lastPart = content.substr(lastOffset);\n    createUnderLength('-1', lastPart);\n  }\n\n  return <>{elements}</>;\n}\n\nexport default LogBoxMessage;\n"]},"metadata":{},"sourceType":"module"}