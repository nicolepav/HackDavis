{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Animated from \"../../Animated/Animated\";\nimport Easing from \"../../Animated/Easing\";\nimport * as React from 'react';\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport Text from \"../../Text/Text\";\nimport LogBoxButton from \"./LogBoxButton\";\nimport * as LogBoxStyle from \"./LogBoxStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction LogBoxInspectorSourceMapStatus(props) {\n  var _React$useState = React.useState({\n    animation: null,\n    rotate: null\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (props.status === 'PENDING') {\n      if (state.animation == null) {\n        var animated = new Animated.Value(0);\n        var animation = Animated.loop(Animated.timing(animated, {\n          duration: 2000,\n          easing: Easing.linear,\n          toValue: 1,\n          useNativeDriver: true\n        }));\n        setState({\n          animation: animation,\n          rotate: animated.interpolate({\n            inputRange: [0, 1],\n            outputRange: ['0deg', '360deg']\n          })\n        });\n        animation.start();\n      }\n    } else {\n      if (state.animation != null) {\n        state.animation.stop();\n        setState({\n          animation: null,\n          rotate: null\n        });\n      }\n    }\n\n    return function () {\n      if (state.animation != null) {\n        state.animation.stop();\n      }\n    };\n  }, [props.status, state.animation]);\n  var image;\n  var color;\n\n  switch (props.status) {\n    case 'FAILED':\n      image = require(\"./LogBoxImages/alert-triangle.png\");\n      color = LogBoxStyle.getErrorColor(1);\n      break;\n\n    case 'PENDING':\n      image = require(\"./LogBoxImages/loader.png\");\n      color = LogBoxStyle.getWarningColor(1);\n      break;\n  }\n\n  if (props.status === 'COMPLETE' || image == null) {\n    return null;\n  }\n\n  return _jsxs(LogBoxButton, {\n    backgroundColor: {\n      default: 'transparent',\n      pressed: LogBoxStyle.getBackgroundColor(1)\n    },\n    hitSlop: {\n      bottom: 8,\n      left: 8,\n      right: 8,\n      top: 8\n    },\n    onPress: props.onPress,\n    style: styles.root,\n    children: [_jsx(Animated.Image, {\n      source: image,\n      style: [styles.image, {\n        tintColor: color\n      }, state.rotate == null || props.status !== 'PENDING' ? null : {\n        transform: [{\n          rotate: state.rotate\n        }]\n      }]\n    }), _jsx(Text, {\n      style: [styles.text, {\n        color: color\n      }],\n      children: \"Source Map\"\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    alignItems: 'center',\n    borderRadius: 12,\n    flexDirection: 'row',\n    height: 24,\n    paddingHorizontal: 8\n  },\n  image: {\n    height: 14,\n    width: 16,\n    marginEnd: 4,\n    tintColor: LogBoxStyle.getTextColor(0.4)\n  },\n  text: {\n    fontSize: 12,\n    includeFontPadding: false,\n    lineHeight: 16\n  }\n});\nexport default LogBoxInspectorSourceMapStatus;","map":{"version":3,"sources":["C:/Users/nicol/Documents/Repos/HackDavis/PantryPickupProject/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSourceMapStatus.js"],"names":["Animated","Easing","React","StyleSheet","Text","LogBoxButton","LogBoxStyle","LogBoxInspectorSourceMapStatus","props","useState","animation","rotate","state","setState","useEffect","status","animated","Value","loop","timing","duration","easing","linear","toValue","useNativeDriver","interpolate","inputRange","outputRange","start","stop","image","color","require","getErrorColor","getWarningColor","default","pressed","getBackgroundColor","bottom","left","right","top","onPress","styles","root","tintColor","transform","text","create","alignItems","borderRadius","flexDirection","height","paddingHorizontal","width","marginEnd","getTextColor","fontSize","includeFontPadding","lineHeight"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport Animated from '../../Animated/Animated';\nimport Easing from '../../Animated/Easing';\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Text from '../../Text/Text';\nimport LogBoxButton from './LogBoxButton';\nimport * as LogBoxStyle from './LogBoxStyle';\n\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\ntype Props = $ReadOnly<{|\n  onPress?: ?(event: PressEvent) => void,\n  status: 'COMPLETE' | 'FAILED' | 'NONE' | 'PENDING',\n|}>;\n\nfunction LogBoxInspectorSourceMapStatus(props: Props): React.Node {\n  const [state, setState] = React.useState({\n    animation: null,\n    rotate: null,\n  });\n\n  React.useEffect(() => {\n    if (props.status === 'PENDING') {\n      if (state.animation == null) {\n        const animated = new Animated.Value(0);\n        const animation = Animated.loop(\n          Animated.timing(animated, {\n            duration: 2000,\n            easing: Easing.linear,\n            toValue: 1,\n            useNativeDriver: true,\n          }),\n        );\n        setState({\n          animation,\n          rotate: animated.interpolate({\n            inputRange: [0, 1],\n            /* $FlowFixMe(>=0.38.0) - Flow error detected during the deployment\n             * of v0.38.0. To see the error, remove this comment and run flow\n             */\n            outputRange: ['0deg', '360deg'],\n          }),\n        });\n        animation.start();\n      }\n    } else {\n      if (state.animation != null) {\n        state.animation.stop();\n        setState({\n          animation: null,\n          rotate: null,\n        });\n      }\n    }\n\n    return () => {\n      if (state.animation != null) {\n        state.animation.stop();\n      }\n    };\n  }, [props.status, state.animation]);\n\n  let image;\n  let color;\n  switch (props.status) {\n    case 'FAILED':\n      image = require('./LogBoxImages/alert-triangle.png');\n      color = LogBoxStyle.getErrorColor(1);\n      break;\n    case 'PENDING':\n      image = require('./LogBoxImages/loader.png');\n      color = LogBoxStyle.getWarningColor(1);\n      break;\n  }\n\n  if (props.status === 'COMPLETE' || image == null) {\n    return null;\n  }\n\n  return (\n    <LogBoxButton\n      backgroundColor={{\n        default: 'transparent',\n        pressed: LogBoxStyle.getBackgroundColor(1),\n      }}\n      hitSlop={{bottom: 8, left: 8, right: 8, top: 8}}\n      onPress={props.onPress}\n      style={styles.root}>\n      <Animated.Image\n        source={image}\n        style={[\n          styles.image,\n          {tintColor: color},\n          state.rotate == null || props.status !== 'PENDING'\n            ? null\n            : {transform: [{rotate: state.rotate}]},\n        ]}\n      />\n      <Text style={[styles.text, {color}]}>Source Map</Text>\n    </LogBoxButton>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    alignItems: 'center',\n    borderRadius: 12,\n    flexDirection: 'row',\n    height: 24,\n    paddingHorizontal: 8,\n  },\n  image: {\n    height: 14,\n    width: 16,\n    marginEnd: 4,\n    tintColor: LogBoxStyle.getTextColor(0.4),\n  },\n  text: {\n    fontSize: 12,\n    includeFontPadding: false,\n    lineHeight: 16,\n  },\n});\n\nexport default LogBoxInspectorSourceMapStatus;\n"]},"metadata":{},"sourceType":"module"}