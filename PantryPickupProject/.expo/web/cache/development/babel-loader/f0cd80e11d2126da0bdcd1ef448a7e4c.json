{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nvar _NativeStatusBarManag;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Platform = require(\"../../Utilities/Platform\");\n\nvar React = require('react');\n\nvar invariant = require('invariant');\n\nvar processColor = require(\"../../StyleSheet/processColor\");\n\nimport NativeStatusBarManagerAndroid from \"./NativeStatusBarManagerAndroid\";\nimport NativeStatusBarManagerIOS from \"./NativeStatusBarManagerIOS\";\n\nfunction mergePropsStack(propsStack, defaultValues) {\n  return propsStack.reduce(function (prev, cur) {\n    for (var prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n\n    return prev;\n  }, _extends({}, defaultValues));\n}\n\nfunction createStackEntry(props) {\n  return {\n    backgroundColor: props.backgroundColor != null ? {\n      value: props.backgroundColor,\n      animated: props.animated\n    } : null,\n    barStyle: props.barStyle != null ? {\n      value: props.barStyle,\n      animated: props.animated\n    } : null,\n    translucent: props.translucent,\n    hidden: props.hidden != null ? {\n      value: props.hidden,\n      animated: props.animated,\n      transition: props.showHideTransition\n    } : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible\n  };\n}\n\nvar StatusBar = function (_React$Component) {\n  _inherits(StatusBar, _React$Component);\n\n  var _super = _createSuper(StatusBar);\n\n  function StatusBar() {\n    var _this;\n\n    _classCallCheck(this, StatusBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._stackEntry = null;\n    return _this;\n  }\n\n  _createClass(StatusBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._stackEntry = StatusBar.pushStackEntry(this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      StatusBar.popStackEntry(this._stackEntry);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }], [{\n    key: \"setHidden\",\n    value: function setHidden(hidden, animation) {\n      animation = animation || 'none';\n      StatusBar._defaultProps.hidden.value = hidden;\n\n      if (Platform.OS === 'ios') {\n        NativeStatusBarManagerIOS.setHidden(hidden, animation);\n      } else if (Platform.OS === 'android') {\n        NativeStatusBarManagerAndroid.setHidden(hidden);\n      }\n    }\n  }, {\n    key: \"setBarStyle\",\n    value: function setBarStyle(style, animated) {\n      animated = animated || false;\n      StatusBar._defaultProps.barStyle.value = style;\n\n      if (Platform.OS === 'ios') {\n        NativeStatusBarManagerIOS.setStyle(style, animated);\n      } else if (Platform.OS === 'android') {\n        NativeStatusBarManagerAndroid.setStyle(style);\n      }\n    }\n  }, {\n    key: \"setNetworkActivityIndicatorVisible\",\n    value: function setNetworkActivityIndicatorVisible(visible) {\n      if (Platform.OS !== 'ios') {\n        console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');\n        return;\n      }\n\n      StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n      NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(visible);\n    }\n  }, {\n    key: \"setBackgroundColor\",\n    value: function setBackgroundColor(color, animated) {\n      if (Platform.OS !== 'android') {\n        console.warn('`setBackgroundColor` is only available on Android');\n        return;\n      }\n\n      animated = animated || false;\n      StatusBar._defaultProps.backgroundColor.value = color;\n      var processedColor = processColor(color);\n\n      if (processedColor == null) {\n        console.warn(\"`StatusBar.setBackgroundColor`: Color \" + color + \" parsed to null or undefined\");\n        return;\n      }\n\n      invariant(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');\n      NativeStatusBarManagerAndroid.setColor(processedColor, animated);\n    }\n  }, {\n    key: \"setTranslucent\",\n    value: function setTranslucent(translucent) {\n      if (Platform.OS !== 'android') {\n        console.warn('`setTranslucent` is only available on Android');\n        return;\n      }\n\n      StatusBar._defaultProps.translucent = translucent;\n      NativeStatusBarManagerAndroid.setTranslucent(translucent);\n    }\n  }, {\n    key: \"pushStackEntry\",\n    value: function pushStackEntry(props) {\n      var entry = createStackEntry(props);\n\n      StatusBar._propsStack.push(entry);\n\n      StatusBar._updatePropsStack();\n\n      return entry;\n    }\n  }, {\n    key: \"popStackEntry\",\n    value: function popStackEntry(entry) {\n      var index = StatusBar._propsStack.indexOf(entry);\n\n      if (index !== -1) {\n        StatusBar._propsStack.splice(index, 1);\n      }\n\n      StatusBar._updatePropsStack();\n    }\n  }, {\n    key: \"replaceStackEntry\",\n    value: function replaceStackEntry(entry, props) {\n      var newEntry = createStackEntry(props);\n\n      var index = StatusBar._propsStack.indexOf(entry);\n\n      if (index !== -1) {\n        StatusBar._propsStack[index] = newEntry;\n      }\n\n      StatusBar._updatePropsStack();\n\n      return newEntry;\n    }\n  }]);\n\n  return StatusBar;\n}(React.Component);\n\nStatusBar._propsStack = [];\nStatusBar._defaultProps = createStackEntry({\n  animated: false,\n  showHideTransition: 'fade',\n  backgroundColor: Platform.OS === 'android' ? (_NativeStatusBarManag = NativeStatusBarManagerAndroid.getConstants().DEFAULT_BACKGROUND_COLOR) != null ? _NativeStatusBarManag : 'black' : 'black',\n  barStyle: 'default',\n  translucent: false,\n  hidden: false,\n  networkActivityIndicatorVisible: false\n});\nStatusBar._updateImmediate = null;\nStatusBar._currentValues = null;\nStatusBar.currentHeight = Platform.OS === 'android' ? NativeStatusBarManagerAndroid.getConstants().HEIGHT : null;\nStatusBar.defaultProps = {\n  animated: false,\n  showHideTransition: 'fade'\n};\n\nStatusBar._updatePropsStack = function () {\n  clearImmediate(StatusBar._updateImmediate);\n  StatusBar._updateImmediate = setImmediate(function () {\n    var oldProps = StatusBar._currentValues;\n    var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);\n\n    if (Platform.OS === 'ios') {\n      if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {\n        NativeStatusBarManagerIOS.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);\n      }\n\n      if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n        NativeStatusBarManagerIOS.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');\n      }\n\n      if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {\n        NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);\n      }\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setStyle(mergedProps.barStyle.value);\n      var processedColor = processColor(mergedProps.backgroundColor.value);\n\n      if (processedColor == null) {\n        console.warn(\"`StatusBar._updatePropsStack`: Color \" + mergedProps.backgroundColor.value + \" parsed to null or undefined\");\n      } else {\n        invariant(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');\n        NativeStatusBarManagerAndroid.setColor(processedColor, mergedProps.backgroundColor.animated);\n      }\n\n      if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n        NativeStatusBarManagerAndroid.setHidden(mergedProps.hidden.value);\n      }\n\n      if (!oldProps || oldProps.translucent !== mergedProps.translucent) {\n        NativeStatusBarManagerAndroid.setTranslucent(mergedProps.translucent);\n      }\n    }\n\n    StatusBar._currentValues = mergedProps;\n  });\n};\n\nmodule.exports = StatusBar;","map":{"version":3,"sources":["C:/Users/nicol/Documents/Repos/HackDavis/PantryPickupProject/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js"],"names":["Platform","require","React","invariant","processColor","NativeStatusBarManagerAndroid","NativeStatusBarManagerIOS","mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","createStackEntry","props","backgroundColor","value","animated","barStyle","translucent","hidden","transition","showHideTransition","networkActivityIndicatorVisible","StatusBar","_stackEntry","pushStackEntry","popStackEntry","replaceStackEntry","animation","_defaultProps","OS","setHidden","style","setStyle","visible","console","warn","setNetworkActivityIndicatorVisible","color","processedColor","setColor","setTranslucent","entry","_propsStack","push","_updatePropsStack","index","indexOf","splice","newEntry","Component","getConstants","DEFAULT_BACKGROUND_COLOR","_updateImmediate","_currentValues","currentHeight","HEIGHT","defaultProps","clearImmediate","setImmediate","oldProps","mergedProps","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\n\nconst invariant = require('invariant');\nconst processColor = require('../../StyleSheet/processColor');\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\n\nimport NativeStatusBarManagerAndroid from './NativeStatusBarManagerAndroid';\nimport NativeStatusBarManagerIOS from './NativeStatusBarManagerIOS';\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Keys<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n  ...\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Keys<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n  ...\n}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * The background color of the status bar.\n   * @platform android\n   */\n  backgroundColor?: ?ColorValue,\n  /**\n   * If the status bar is translucent.\n   * When translucent is set to true, the app will draw under the status bar.\n   * This is useful when using a semi transparent status bar color.\n   *\n   * @platform android\n   */\n  translucent?: ?boolean,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * If the network activity indicator should be visible.\n   *\n   * @platform ios\n   */\n  networkActivityIndicatorVisible?: ?boolean,\n  /**\n   * The transition effect when showing and hiding the status bar using the `hidden`\n   * prop. Defaults to 'fade'.\n   *\n   * @platform ios\n   */\n  showHideTransition?: ?('fade' | 'slide' | 'none'),\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...AndroidProps,\n  ...IOSProps,\n  /**\n   * If the status bar is hidden.\n   */\n  hidden?: ?boolean,\n  /**\n   * If the transition between status bar property changes should be animated.\n   * Supported for backgroundColor, barStyle and hidden.\n   */\n  animated?: ?boolean,\n  /**\n   * Sets the color of the status bar text.\n   */\n  barStyle?: ?('default' | 'light-content' | 'dark-content'),\n|}>;\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce((prev, cur) => {\n    for (const prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n    return prev;\n  }, Object.assign({}, defaultValues));\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated: props.animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated: props.animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated: props.animated,\n            transition: props.showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there are static methods\n * to manipulate the `StatusBar` display stack. These methods have the same\n * behavior as mounting and unmounting a `StatusBar` component.\n *\n * For example, you can call `StatusBar.pushStackEntry` to update the status bar\n * before launching a third-party native UI component, and then call\n * `StatusBar.popStackEntry` when completed.\n *\n * ```\n * const openThirdPartyBugReporter = async () => {\n *   // The bug reporter has a dark background, so we push a new status bar style.\n *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});\n *\n *   // `open` returns a promise that resolves when the UI is dismissed.\n *   await BugReporter.open();\n *\n *   // Don't forget to call `popStackEntry` when you're done.\n *   StatusBar.popStackEntry(stackEntry);\n * };\n * ```\n *\n * There is a legacy imperative API that enables you to manually update the\n * status bar styles. However, the legacy API does not update the internal\n * `StatusBar` display stack, which means that any changes will be overridden\n * whenever a `StatusBar` component is mounted or unmounted.\n *\n * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or\n * `replaceStackEntry` instead of the static methods beginning with `set`.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<Props> {\n  static _propsStack = [];\n\n  static _defaultProps = createStackEntry({\n    animated: false,\n    showHideTransition: 'fade',\n    backgroundColor:\n      Platform.OS === 'android'\n        ? NativeStatusBarManagerAndroid.getConstants()\n            .DEFAULT_BACKGROUND_COLOR ?? 'black'\n        : 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight: ?number =\n    Platform.OS === 'android'\n      ? NativeStatusBarManagerAndroid.getConstants().HEIGHT\n      : null;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n\n    const processedColor = processColor(color);\n    if (processedColor == null) {\n      console.warn(\n        `\\`StatusBar.setBackgroundColor\\`: Color ${color} parsed to null or undefined`,\n      );\n      return;\n    }\n    invariant(\n      typeof processedColor === 'number',\n      'Unexpected color given for StatusBar.setBackgroundColor',\n    );\n\n    NativeStatusBarManagerAndroid.setColor(processedColor, animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    NativeStatusBarManagerAndroid.setTranslucent(translucent);\n  }\n\n  /**\n   * Push a StatusBar entry onto the stack.\n   * The return value should be passed to `popStackEntry` when complete.\n   *\n   * @param props Object containing the StatusBar props to use in the stack entry.\n   */\n  static pushStackEntry(props: any): any {\n    const entry = createStackEntry(props);\n    StatusBar._propsStack.push(entry);\n    StatusBar._updatePropsStack();\n    return entry;\n  }\n\n  /**\n   * Pop a StatusBar entry from the stack.\n   *\n   * @param entry Entry returned from `pushStackEntry`.\n   */\n  static popStackEntry(entry: any) {\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack.splice(index, 1);\n    }\n    StatusBar._updatePropsStack();\n  }\n\n  /**\n   * Replace an existing StatusBar stack entry with new props.\n   *\n   * @param entry Entry returned from `pushStackEntry` to replace.\n   * @param props Object containing the StatusBar props to use in the replacement stack entry.\n   */\n  static replaceStackEntry(entry: any, props: any): any {\n    const newEntry = createStackEntry(props);\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack[index] = newEntry;\n    }\n    StatusBar._updatePropsStack();\n    return newEntry;\n  }\n\n  static defaultProps: {|\n    animated: boolean,\n    showHideTransition: $TEMPORARY$string<'fade'>,\n  |} = {\n    animated: false,\n    showHideTransition: 'fade',\n  };\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = StatusBar.pushStackEntry(this.props);\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    StatusBar.popStackEntry(this._stackEntry);\n  }\n\n  componentDidUpdate() {\n    this._stackEntry = StatusBar.replaceStackEntry(\n      this._stackEntry,\n      this.props,\n    );\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  static _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          NativeStatusBarManagerIOS.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated || false,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerIOS.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        //todo(T60684787): Add back optimization to only update bar style and\n        //background color if the new value is different from the old value.\n        NativeStatusBarManagerAndroid.setStyle(mergedProps.barStyle.value);\n        const processedColor = processColor(mergedProps.backgroundColor.value);\n        if (processedColor == null) {\n          console.warn(\n            `\\`StatusBar._updatePropsStack\\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`,\n          );\n        } else {\n          invariant(\n            typeof processedColor === 'number',\n            'Unexpected color given in StatusBar._updatePropsStack',\n          );\n          NativeStatusBarManagerAndroid.setColor(\n            processedColor,\n            mergedProps.backgroundColor.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerAndroid.setHidden(mergedProps.hidden.value);\n        }\n        if (!oldProps || oldProps.translucent !== mergedProps.translucent) {\n          NativeStatusBarManagerAndroid.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"]},"metadata":{},"sourceType":"module"}