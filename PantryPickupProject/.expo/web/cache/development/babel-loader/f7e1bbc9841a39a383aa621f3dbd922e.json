{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AnimatedImplementation from \"../../Animated/AnimatedImplementation\";\nimport * as React from 'react';\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport View from \"../View/View\";\nimport Platform from \"../../Utilities/Platform\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar AnimatedView = AnimatedImplementation.createAnimatedComponent(View);\n\nvar ScrollViewStickyHeader = function (_React$Component) {\n  _inherits(ScrollViewStickyHeader, _React$Component);\n\n  var _super = _createSuper(ScrollViewStickyHeader);\n\n  function ScrollViewStickyHeader() {\n    var _this;\n\n    _classCallCheck(this, ScrollViewStickyHeader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      measured: false,\n      layoutY: 0,\n      layoutHeight: 0,\n      nextHeaderLayoutY: _this.props.nextHeaderLayoutY,\n      translateY: null\n    };\n    _this._translateY = null;\n    _this._shouldRecreateTranslateY = true;\n    _this._haveReceivedInitialZeroTranslateY = true;\n    _this._debounceTimeout = Platform.OS === 'android' ? 15 : 64;\n\n    _this._onLayout = function (event) {\n      var layoutY = event.nativeEvent.layout.y;\n      var layoutHeight = event.nativeEvent.layout.height;\n      var measured = true;\n\n      if (layoutY !== _this.state.layoutY || layoutHeight !== _this.state.layoutHeight || measured !== _this.state.measured) {\n        _this._shouldRecreateTranslateY = true;\n      }\n\n      _this.setState({\n        measured: measured,\n        layoutY: layoutY,\n        layoutHeight: layoutHeight\n      });\n\n      _this.props.onLayout(event);\n\n      var child = React.Children.only(_this.props.children);\n\n      if (child.props.onLayout) {\n        child.props.onLayout(event);\n      }\n    };\n\n    _this._setComponentRef = function (ref) {\n      _this._ref = ref;\n    };\n\n    return _this;\n  }\n\n  _createClass(ScrollViewStickyHeader, [{\n    key: \"setNextHeaderY\",\n    value: function setNextHeaderY(y) {\n      this._shouldRecreateTranslateY = true;\n      this.setState({\n        nextHeaderLayoutY: y\n      });\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.scrollViewHeight !== this.props.scrollViewHeight || nextProps.scrollAnimatedValue !== this.props.scrollAnimatedValue || nextProps.inverted !== this.props.inverted) {\n        this._shouldRecreateTranslateY = true;\n      }\n    }\n  }, {\n    key: \"updateTranslateListener\",\n    value: function updateTranslateListener(translateY, isFabric) {\n      var _this2 = this;\n\n      if (this._translateY != null && this._animatedValueListenerId != null) {\n        this._translateY.removeListener(this._animatedValueListenerId);\n      }\n\n      this._translateY = translateY;\n      this._shouldRecreateTranslateY = false;\n\n      if (!isFabric) {\n        return;\n      }\n\n      if (!this._animatedValueListener) {\n        this._animatedValueListener = function (_ref) {\n          var value = _ref.value;\n\n          if (value === 0 && !_this2._haveReceivedInitialZeroTranslateY) {\n            _this2._haveReceivedInitialZeroTranslateY = true;\n            return;\n          }\n\n          if (_this2._timer) {\n            clearTimeout(_this2._timer);\n          }\n\n          _this2._timer = setTimeout(function () {\n            if (value !== _this2.state.translateY) {\n              _this2.setState({\n                translateY: value\n              });\n            }\n          }, _this2._debounceTimeout);\n        };\n      }\n\n      if (this.state.translateY !== 0 && this.state.translateY != null) {\n        this._haveReceivedInitialZeroTranslateY = false;\n      }\n\n      this._animatedValueListenerId = translateY.addListener(this._animatedValueListener);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$_ref$_internalI, _this$_ref$_internalI2;\n\n      var isFabric = !!(this._ref && (_this$_ref$_internalI = this._ref['_internalInstanceHandle']) != null && (_this$_ref$_internalI2 = _this$_ref$_internalI.stateNode) != null && _this$_ref$_internalI2.canonical);\n\n      if (this._shouldRecreateTranslateY) {\n        var _this$props = this.props,\n            inverted = _this$props.inverted,\n            scrollViewHeight = _this$props.scrollViewHeight;\n        var _this$state = this.state,\n            measured = _this$state.measured,\n            layoutHeight = _this$state.layoutHeight,\n            layoutY = _this$state.layoutY,\n            nextHeaderLayoutY = _this$state.nextHeaderLayoutY;\n        var inputRange = [-1, 0];\n        var outputRange = [0, 0];\n\n        if (measured) {\n          if (inverted) {\n            if (scrollViewHeight != null) {\n              var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;\n\n              if (stickStartPoint > 0) {\n                inputRange.push(stickStartPoint);\n                outputRange.push(0);\n                inputRange.push(stickStartPoint + 1);\n                outputRange.push(1);\n                var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;\n\n                if (collisionPoint > stickStartPoint) {\n                  inputRange.push(collisionPoint, collisionPoint + 1);\n                  outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);\n                }\n              }\n            }\n          } else {\n            inputRange.push(layoutY);\n            outputRange.push(0);\n\n            var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;\n\n            if (_collisionPoint >= layoutY) {\n              inputRange.push(_collisionPoint, _collisionPoint + 1);\n              outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);\n            } else {\n              inputRange.push(layoutY + 1);\n              outputRange.push(1);\n            }\n          }\n        }\n\n        this.updateTranslateListener(this.props.scrollAnimatedValue.interpolate({\n          inputRange: inputRange,\n          outputRange: outputRange\n        }), isFabric);\n      }\n\n      var child = React.Children.only(this.props.children);\n      var passthroughAnimatedPropExplicitValues = isFabric && this.state.translateY != null ? {\n        style: {\n          transform: [{\n            translateY: this.state.translateY\n          }]\n        }\n      } : null;\n      return _jsx(AnimatedView, {\n        collapsable: false,\n        nativeID: this.props.nativeID,\n        onLayout: this._onLayout,\n        ref: this._setComponentRef,\n        style: [child.props.style, styles.header, {\n          transform: [{\n            translateY: this._translateY\n          }]\n        }],\n        passthroughAnimatedPropExplicitValues: passthroughAnimatedPropExplicitValues,\n        children: React.cloneElement(child, {\n          style: styles.fill,\n          onLayout: undefined\n        })\n      });\n    }\n  }]);\n\n  return ScrollViewStickyHeader;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  header: {\n    zIndex: 10,\n    position: 'relative'\n  },\n  fill: {\n    flex: 1\n  }\n});\nmodule.exports = ScrollViewStickyHeader;","map":{"version":3,"sources":["C:/Users/nicol/Documents/Repos/HackDavis/PantryPickupProject/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js"],"names":["AnimatedImplementation","React","StyleSheet","View","Platform","AnimatedView","createAnimatedComponent","ScrollViewStickyHeader","state","measured","layoutY","layoutHeight","nextHeaderLayoutY","props","translateY","_translateY","_shouldRecreateTranslateY","_haveReceivedInitialZeroTranslateY","_debounceTimeout","OS","_onLayout","event","nativeEvent","layout","y","height","setState","onLayout","child","Children","only","children","_setComponentRef","ref","_ref","nextProps","scrollViewHeight","scrollAnimatedValue","inverted","isFabric","_animatedValueListenerId","removeListener","_animatedValueListener","value","_timer","clearTimeout","setTimeout","addListener","stateNode","canonical","inputRange","outputRange","stickStartPoint","push","collisionPoint","updateTranslateListener","interpolate","passthroughAnimatedPropExplicitValues","style","transform","nativeID","styles","header","cloneElement","fill","undefined","Component","create","zIndex","position","flex","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport AnimatedImplementation from '../../Animated/AnimatedImplementation';\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport View from '../View/View';\nimport Platform from '../../Utilities/Platform';\n\nimport type {LayoutEvent} from '../../Types/CoreEventTypes';\n\nconst AnimatedView = AnimatedImplementation.createAnimatedComponent(View);\n\nexport type Props = {\n  children?: React.Element<any>,\n  nextHeaderLayoutY: ?number,\n  onLayout: (event: LayoutEvent) => void,\n  scrollAnimatedValue: AnimatedImplementation.Value,\n  // Will cause sticky headers to stick at the bottom of the ScrollView instead\n  // of the top.\n  inverted: ?boolean,\n  // The height of the parent ScrollView. Currently only set when inverted.\n  scrollViewHeight: ?number,\n  nativeID?: ?string,\n  ...\n};\n\ntype State = {\n  measured: boolean,\n  layoutY: number,\n  layoutHeight: number,\n  nextHeaderLayoutY: ?number,\n  translateY: ?number,\n  ...\n};\n\nclass ScrollViewStickyHeader extends React.Component<Props, State> {\n  state: State = {\n    measured: false,\n    layoutY: 0,\n    layoutHeight: 0,\n    nextHeaderLayoutY: this.props.nextHeaderLayoutY,\n    translateY: null,\n  };\n\n  _translateY: ?AnimatedImplementation.Interpolation = null;\n  _shouldRecreateTranslateY: boolean = true;\n  _haveReceivedInitialZeroTranslateY: boolean = true;\n  _ref: any; // TODO T53738161: flow type this, and the whole file\n\n  // Fabric-only:\n  _timer: ?TimeoutID;\n  _animatedValueListenerId: string;\n  _animatedValueListener: (valueObject: $ReadOnly<{|value: number|}>) => void;\n  _debounceTimeout: number = Platform.OS === 'android' ? 15 : 64;\n\n  setNextHeaderY(y: number) {\n    this._shouldRecreateTranslateY = true;\n    this.setState({nextHeaderLayoutY: y});\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      nextProps.scrollViewHeight !== this.props.scrollViewHeight ||\n      nextProps.scrollAnimatedValue !== this.props.scrollAnimatedValue ||\n      nextProps.inverted !== this.props.inverted\n    ) {\n      this._shouldRecreateTranslateY = true;\n    }\n  }\n\n  updateTranslateListener(\n    translateY: AnimatedImplementation.Interpolation,\n    isFabric: boolean,\n  ) {\n    if (this._translateY != null && this._animatedValueListenerId != null) {\n      this._translateY.removeListener(this._animatedValueListenerId);\n    }\n\n    this._translateY = translateY;\n    this._shouldRecreateTranslateY = false;\n\n    if (!isFabric) {\n      return;\n    }\n\n    if (!this._animatedValueListener) {\n      // This is called whenever the (Interpolated) Animated Value\n      // updates, which is several times per frame during scrolling.\n      // To ensure that the Fabric ShadowTree has the most recent\n      // translate style of this node, we debounce the value and then\n      // pass it through to the underlying node during render.\n      // This is:\n      // 1. Only an issue in Fabric.\n      // 2. Worse in Android than iOS. In Android, but not iOS, you\n      //    can touch and move your finger slightly and still trigger\n      //    a \"tap\" event. In iOS, moving will cancel the tap in\n      //    both Fabric and non-Fabric. On Android when you move\n      //    your finger, the hit-detection moves from the Android\n      //    platform to JS, so we need the ShadowTree to have knowledge\n      //    of the current position.\n      this._animatedValueListener = ({value}) => {\n        // When the AnimatedInterpolation is recreated, it always initializes\n        // to a value of zero and emits a value change of 0 to its listeners.\n        if (value === 0 && !this._haveReceivedInitialZeroTranslateY) {\n          this._haveReceivedInitialZeroTranslateY = true;\n          return;\n        }\n        if (this._timer) {\n          clearTimeout(this._timer);\n        }\n        this._timer = setTimeout(() => {\n          if (value !== this.state.translateY) {\n            this.setState({\n              translateY: value,\n            });\n          }\n        }, this._debounceTimeout);\n      };\n    }\n    if (this.state.translateY !== 0 && this.state.translateY != null) {\n      this._haveReceivedInitialZeroTranslateY = false;\n    }\n    this._animatedValueListenerId = translateY.addListener(\n      this._animatedValueListener,\n    );\n  }\n\n  _onLayout = event => {\n    const layoutY = event.nativeEvent.layout.y;\n    const layoutHeight = event.nativeEvent.layout.height;\n    const measured = true;\n\n    if (\n      layoutY !== this.state.layoutY ||\n      layoutHeight !== this.state.layoutHeight ||\n      measured !== this.state.measured\n    ) {\n      this._shouldRecreateTranslateY = true;\n    }\n\n    this.setState({\n      measured,\n      layoutY,\n      layoutHeight,\n    });\n\n    this.props.onLayout(event);\n    const child = React.Children.only(this.props.children);\n    if (child.props.onLayout) {\n      child.props.onLayout(event);\n    }\n  };\n\n  _setComponentRef = ref => {\n    this._ref = ref;\n  };\n\n  render(): React.Node {\n    // Fabric Detection\n    // eslint-disable-next-line dot-notation\n    const isFabric = !!(\n      this._ref && this._ref['_internalInstanceHandle']?.stateNode?.canonical\n    );\n\n    // Initially and in the case of updated props or layout, we\n    // recreate this interpolated value. Otherwise, we do not recreate\n    // when there are state changes.\n    if (this._shouldRecreateTranslateY) {\n      const {inverted, scrollViewHeight} = this.props;\n      const {measured, layoutHeight, layoutY, nextHeaderLayoutY} = this.state;\n      const inputRange: Array<number> = [-1, 0];\n      const outputRange: Array<number> = [0, 0];\n\n      if (measured) {\n        if (inverted) {\n          // The interpolation looks like:\n          // - Negative scroll: no translation\n          // - `stickStartPoint` is the point at which the header will start sticking.\n          //   It is calculated using the ScrollView viewport height so it is a the bottom.\n          // - Headers that are in the initial viewport will never stick, `stickStartPoint`\n          //   will be negative.\n          // - From 0 to `stickStartPoint` no translation. This will cause the header\n          //   to scroll normally until it reaches the top of the scroll view.\n          // - From `stickStartPoint` to when the next header y hits the bottom edge of the header: translate\n          //   equally to scroll. This will cause the header to stay at the top of the scroll view.\n          // - Past the collision with the next header y: no more translation. This will cause the\n          //   header to continue scrolling up and make room for the next sticky header.\n          //   In the case that there is no next header just translate equally to\n          //   scroll indefinitely.\n          if (scrollViewHeight != null) {\n            const stickStartPoint = layoutY + layoutHeight - scrollViewHeight;\n            if (stickStartPoint > 0) {\n              inputRange.push(stickStartPoint);\n              outputRange.push(0);\n              inputRange.push(stickStartPoint + 1);\n              outputRange.push(1);\n              // If the next sticky header has not loaded yet (probably windowing) or is the last\n              // we can just keep it sticked forever.\n              const collisionPoint =\n                (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;\n              if (collisionPoint > stickStartPoint) {\n                inputRange.push(collisionPoint, collisionPoint + 1);\n                outputRange.push(\n                  collisionPoint - stickStartPoint,\n                  collisionPoint - stickStartPoint,\n                );\n              }\n            }\n          }\n        } else {\n          // The interpolation looks like:\n          // - Negative scroll: no translation\n          // - From 0 to the y of the header: no translation. This will cause the header\n          //   to scroll normally until it reaches the top of the scroll view.\n          // - From header y to when the next header y hits the bottom edge of the header: translate\n          //   equally to scroll. This will cause the header to stay at the top of the scroll view.\n          // - Past the collision with the next header y: no more translation. This will cause the\n          //   header to continue scrolling up and make room for the next sticky header.\n          //   In the case that there is no next header just translate equally to\n          //   scroll indefinitely.\n          inputRange.push(layoutY);\n          outputRange.push(0);\n          // If the next sticky header has not loaded yet (probably windowing) or is the last\n          // we can just keep it sticked forever.\n          const collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;\n          if (collisionPoint >= layoutY) {\n            inputRange.push(collisionPoint, collisionPoint + 1);\n            outputRange.push(\n              collisionPoint - layoutY,\n              collisionPoint - layoutY,\n            );\n          } else {\n            inputRange.push(layoutY + 1);\n            outputRange.push(1);\n          }\n        }\n      }\n\n      this.updateTranslateListener(\n        this.props.scrollAnimatedValue.interpolate({\n          inputRange,\n          outputRange,\n        }),\n        isFabric,\n      );\n    }\n\n    const child = React.Children.only(this.props.children);\n\n    // TODO T68319535: remove this if NativeAnimated is rewritten for Fabric\n    const passthroughAnimatedPropExplicitValues =\n      isFabric && this.state.translateY != null\n        ? {\n            style: {transform: [{translateY: this.state.translateY}]},\n          }\n        : null;\n\n    return (\n      <AnimatedView\n        collapsable={false}\n        nativeID={this.props.nativeID}\n        onLayout={this._onLayout}\n        ref={this._setComponentRef}\n        style={[\n          child.props.style,\n          styles.header,\n          {transform: [{translateY: this._translateY}]},\n        ]}\n        passthroughAnimatedPropExplicitValues={\n          passthroughAnimatedPropExplicitValues\n        }>\n        {React.cloneElement(child, {\n          style: styles.fill, // We transfer the child style to the wrapper.\n          onLayout: undefined, // we call this manually through our this._onLayout\n        })}\n      </AnimatedView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    zIndex: 10,\n    position: 'relative',\n  },\n  fill: {\n    flex: 1,\n  },\n});\n\nmodule.exports = ScrollViewStickyHeader;\n"]},"metadata":{},"sourceType":"module"}