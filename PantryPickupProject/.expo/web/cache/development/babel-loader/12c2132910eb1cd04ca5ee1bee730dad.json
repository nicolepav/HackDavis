{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as LogBoxData from \"./Data/LogBoxData\";\nimport LogBoxInspector from \"./UI/LogBoxInspector\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var _LogBoxInspectorContainer = function (_React$Component) {\n  _inherits(_LogBoxInspectorContainer, _React$Component);\n\n  var _super = _createSuper(_LogBoxInspectorContainer);\n\n  function _LogBoxInspectorContainer() {\n    var _this;\n\n    _classCallCheck(this, _LogBoxInspectorContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._handleDismiss = function () {\n      var _this$props = _this.props,\n          selectedLogIndex = _this$props.selectedLogIndex,\n          logs = _this$props.logs;\n      var logsArray = Array.from(logs);\n\n      if (selectedLogIndex != null) {\n        if (logsArray.length - 1 <= 0) {\n          LogBoxData.setSelectedLog(-1);\n        } else if (selectedLogIndex >= logsArray.length - 1) {\n          LogBoxData.setSelectedLog(selectedLogIndex - 1);\n        }\n\n        LogBoxData.dismiss(logsArray[selectedLogIndex]);\n      }\n    };\n\n    _this._handleMinimize = function () {\n      LogBoxData.setSelectedLog(-1);\n    };\n\n    _this._handleSetSelectedLog = function (index) {\n      LogBoxData.setSelectedLog(index);\n    };\n\n    return _this;\n  }\n\n  _createClass(_LogBoxInspectorContainer, [{\n    key: \"render\",\n    value: function render() {\n      return _jsx(View, {\n        style: StyleSheet.absoluteFill,\n        children: _jsx(LogBoxInspector, {\n          onDismiss: this._handleDismiss,\n          onMinimize: this._handleMinimize,\n          onChangeSelectedIndex: this._handleSetSelectedLog,\n          logs: this.props.logs,\n          selectedIndex: this.props.selectedLogIndex\n        })\n      });\n    }\n  }]);\n\n  return _LogBoxInspectorContainer;\n}(React.Component);\nexport default LogBoxData.withSubscription(_LogBoxInspectorContainer);","map":{"version":3,"sources":["C:/Users/nicol/Documents/Repos/HackDavis/PantryPickupProject/node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js"],"names":["React","LogBoxData","LogBoxInspector","_LogBoxInspectorContainer","_handleDismiss","props","selectedLogIndex","logs","logsArray","Array","from","length","setSelectedLog","dismiss","_handleMinimize","_handleSetSelectedLog","index","StyleSheet","absoluteFill","Component","withSubscription"],"mappings":"AAUA;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAO,KAAKC,UAAZ;AACA,OAAOC,eAAP;;AASA,WAAaC,yBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,UAeEC,cAfF,GAemB,YAAY;AAI3B,wBAAiC,MAAKC,KAAtC;AAAA,UAAOC,gBAAP,eAAOA,gBAAP;AAAA,UAAyBC,IAAzB,eAAyBA,IAAzB;AACA,UAAMC,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWH,IAAX,CAAlB;;AACA,UAAID,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B,YAAIE,SAAS,CAACG,MAAV,GAAmB,CAAnB,IAAwB,CAA5B,EAA+B;AAC7BV,UAAAA,UAAU,CAACW,cAAX,CAA0B,CAAC,CAA3B;AACD,SAFD,MAEO,IAAIN,gBAAgB,IAAIE,SAAS,CAACG,MAAV,GAAmB,CAA3C,EAA8C;AACnDV,UAAAA,UAAU,CAACW,cAAX,CAA0BN,gBAAgB,GAAG,CAA7C;AACD;;AAEDL,QAAAA,UAAU,CAACY,OAAX,CAAmBL,SAAS,CAACF,gBAAD,CAA5B;AACD;AACF,KA9BH;;AAAA,UAgCEQ,eAhCF,GAgCoB,YAAY;AAC5Bb,MAAAA,UAAU,CAACW,cAAX,CAA0B,CAAC,CAA3B;AACD,KAlCH;;AAAA,UAoCEG,qBApCF,GAoC0B,UAACC,KAAD,EAAyB;AAC/Cf,MAAAA,UAAU,CAACW,cAAX,CAA0BI,KAA1B;AACD,KAtCH;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,kBAAqB;AACnB,aACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,UAAU,CAACC,YAAxB;AAAA,kBACE,KAAC,eAAD;AACE,UAAA,SAAS,EAAE,KAAKd,cADlB;AAEE,UAAA,UAAU,EAAE,KAAKU,eAFnB;AAGE,UAAA,qBAAqB,EAAE,KAAKC,qBAH9B;AAIE,UAAA,IAAI,EAAE,KAAKV,KAAL,CAAWE,IAJnB;AAKE,UAAA,aAAa,EAAE,KAAKF,KAAL,CAAWC;AAL5B;AADF,QADF;AAWD;AAbH;;AAAA;AAAA,EAA+CN,KAAK,CAACmB,SAArD;AAyCA,eAAgBlB,UAAU,CAACmB,gBAAX,CACdjB,yBADc,CAAhB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport {View, StyleSheet} from 'react-native';\nimport * as LogBoxData from './Data/LogBoxData';\nimport LogBoxInspector from './UI/LogBoxInspector';\nimport type LogBoxLog from './Data/LogBoxLog';\n\ntype Props = $ReadOnly<{|\n  logs: $ReadOnlyArray<LogBoxLog>,\n  selectedLogIndex: number,\n  isDisabled?: ?boolean,\n|}>;\n\nexport class _LogBoxInspectorContainer extends React.Component<Props> {\n  render(): React.Node {\n    return (\n      <View style={StyleSheet.absoluteFill}>\n        <LogBoxInspector\n          onDismiss={this._handleDismiss}\n          onMinimize={this._handleMinimize}\n          onChangeSelectedIndex={this._handleSetSelectedLog}\n          logs={this.props.logs}\n          selectedIndex={this.props.selectedLogIndex}\n        />\n      </View>\n    );\n  }\n\n  _handleDismiss = (): void => {\n    // Here we handle the cases when the log is dismissed and it\n    // was either the last log, or when the current index\n    // is now outside the bounds of the log array.\n    const {selectedLogIndex, logs} = this.props;\n    const logsArray = Array.from(logs);\n    if (selectedLogIndex != null) {\n      if (logsArray.length - 1 <= 0) {\n        LogBoxData.setSelectedLog(-1);\n      } else if (selectedLogIndex >= logsArray.length - 1) {\n        LogBoxData.setSelectedLog(selectedLogIndex - 1);\n      }\n\n      LogBoxData.dismiss(logsArray[selectedLogIndex]);\n    }\n  };\n\n  _handleMinimize = (): void => {\n    LogBoxData.setSelectedLog(-1);\n  };\n\n  _handleSetSelectedLog = (index: number): void => {\n    LogBoxData.setSelectedLog(index);\n  };\n}\n\nexport default (LogBoxData.withSubscription(\n  _LogBoxInspectorContainer,\n): React.AbstractComponent<{||}>);\n"]},"metadata":{},"sourceType":"module"}